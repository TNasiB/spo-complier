import { Precedence, PrecedenceEnum } from "../types";

export function getPrecedenceMatrix(): { [key: string]: { [key: string]: Precedence } } {
  // Инициализация матрицы предшествования
  const precedenceMatrix: { [key: string]: { [key: string]: Precedence } } = {
    a: {
      a: PrecedenceEnum.Empty,
      ":=": PrecedenceEnum.Equal,
      ";": PrecedenceEnum.Empty,
      or: PrecedenceEnum.Greater,
      xor: PrecedenceEnum.Greater,
      and: PrecedenceEnum.Greater,
      not: PrecedenceEnum.Empty,
      "(": PrecedenceEnum.Empty,
      ")": PrecedenceEnum.Greater,
      _E: PrecedenceEnum.Empty,
    },
    ":=": {
      a: PrecedenceEnum.Less,
      ":=": PrecedenceEnum.Empty,
      ";": PrecedenceEnum.Equal,
      or: "<",
      xor: "<",
      and: "<",
      not: "<",
      "(": "<",
      ")": ">",
      _E: ">",
    },
    ";": {
      a: "<",
      ":=": "<",
      ";": " ",
      or: "<",
      xor: "<",
      and: "<",
      not: "<",
      "(": "<",
      ")": "=",
      _E: ">",
    },
    or: {
      a: "<",
      ":=": "<",
      ";": ">",
      or: ">",
      xor: "<",
      and: "<",
      not: "<",
      "(": "<",
      ")": ">",
      _E: ">",
    },
    xor: {
      a: "<",
      ":=": "<",
      ";": ">",
      or: ">",
      xor: ">",
      and: "<",
      not: "<",
      "(": "<",
      ")": ">",
      _E: ">",
    },
    and: {
      a: "<",
      ":=": "<",
      ";": ">",
      or: ">",
      xor: ">",
      and: ">",
      not: "<",
      "(": "<",
      ")": ">",
      _E: ">",
    },
    not: {
      a: "<",
      ":=": "=",
      ";": ">",
      or: "<",
      xor: "<",
      and: "<",
      not: "=",
      "(": "<",
      ")": ">",
      _E: ">",
    },
    "(": {
      a: "<",
      ":=": "<",
      ";": "<",
      or: "<",
      xor: "<",
      and: "<",
      not: "<",
      "(": "<",
      ")": "=",
      _E: " ",
    },
    ")": {
      a: " ",
      ":=": " ",
      ";": ">",
      or: ">",
      xor: ">",
      and: ">",
      not: " ",
      "(": " ",
      ")": ">",
      _E: ">",
    },
    _E: {
      a: "<",
      ":=": "<",
      ";": "<",
      or: "<",
      xor: "<",
      and: "<",
      not: "<",
      "(": "<",
      ")": " ",
      _E: " ",
    },
  };

  // Возвращаем инициализированную матрицу предшествования
  return precedenceMatrix;
}
